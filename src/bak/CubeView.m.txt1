//
//  CubeView.m
//  texture-coordinates
//
//  Created by sprite on 2018/11/27.
//  Copyright © 2018年 Christoph Halang. All rights reserved.
//

#import "CubeView.h"
#import <OpenGLES/ES2/glext.h>
#import "Geometry.h"
//#import "SphereCamera.h"
#import "texture_coordinates-Swift.h"

@interface CubeView() {
    CGPoint _anchor_position;
    CGPoint _current_position;
    float _beta;
    float _garma;
    GLuint _indexBuffer;
    int _indexBufferSize;
    GLuint _vertexBuffer;
    int _vertexBufferSize;
    GLuint _vertexArray;
    GLKBaseEffect* _cubeEffect;
    //    GLKViewController* _controller;
    SphereCamera* _camera;
    int _appendIndex;
}

//@property (strong, nonatomic) GLKBaseEffect *cubeEffect;

@end

@implementation CubeView


- (id)initWithCoder:(NSCoder *)aDecoder {
    _indexBufferSize = 36 * 4 * 1024 * 8;
    _vertexBufferSize = 24 * 40 * 1024 * 8;
    _appendIndex=0;
    
    self = [super initWithCoder:aDecoder];
    
    self.context = [[EAGLContext alloc] initWithAPI:kEAGLRenderingAPIOpenGLES2];
    
    self.drawableColorFormat = GLKViewDrawableColorFormatRGBA8888;
    self.drawableDepthFormat = GLKViewDrawableDepthFormat16;
    self.drawableStencilFormat = GLKViewDrawableStencilFormat8;
    self.drawableMultisample = GLKViewDrawableMultisample4X;
    
    if (!self.context) {
        NSLog(@"Failed to create ES context");
        exit(1);
    }
    
    if (![EAGLContext setCurrentContext:self.context]) {
        NSLog(@"Failed to set current OpenGL context!");
        exit(1);
    }
    
    [EAGLContext setCurrentContext:self.context];
    [self initEffect];
    [self setupGL];
    
    return self;
}

- (void)initEffect {
    _cubeEffect = [[GLKBaseEffect alloc] init];
    _cubeEffect.colorMaterialEnabled = GL_TRUE;
    _cubeEffect.light0.enabled = GL_TRUE;
    _cubeEffect.light0.position = GLKVector4Make(0, 10, 0, 1);
    //        self.cubeEffect.light0.diffuseColor = GLKVector4Make(1, 1, 1, 1.0);
    //        self.cubeEffect.light0.ambientColor = GLKVector4Make(1, 1, 1, 1);
    //        self.cubeEffect.light0.specularColor = GLKVector4Make(0, 0, 0, 1);
    
    //    [self configureDefaultLight];
}

#pragma mark - OpenGL Setup & Tear down

- (void)setupGL {
    
    // init GL stuff here
    glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
    glEnable(GL_DEPTH_TEST);
    glEnable(GL_CULL_FACE);
    glDepthFunc(GL_LEQUAL);
    // Enable Transparency
    glEnable(GL_BLEND);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
    
    glEnable(GL_CULL_FACE);
    
    // Create Vertex Array Buffer For Vertex Array Objects
    glGenVertexArraysOES(1, &_vertexArray);
    glBindVertexArrayOES(_vertexArray);
    
    
    // All of the following configuration for per vertex data is stored into the VAO
    
    // setup vertex buffer - what are my vertices?
    glGenBuffers(1, &_vertexBuffer);
    glBindBuffer(GL_ARRAY_BUFFER, _vertexBuffer);
    //    glBufferData(GL_ARRAY_BUFFER, _vertexBufferSize, vertices, GL_DYNAMIC_DRAW);
    glBufferData(GL_ARRAY_BUFFER, sizeof(VerticesCube), VerticesCube, GL_STATIC_DRAW);
    
    // setup index buffer - which vertices form a triangle?
    glGenBuffers(1, &_indexBuffer);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, _indexBuffer);
    //    glBufferData(GL_ELEMENT_ARRAY_BUFFER, _indexBufferSize, indices, GL_DYNAMIC_DRAW);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(IndicesTrianglesCube), IndicesTrianglesCube, GL_STATIC_DRAW);
    
    //Setup Vertex Atrributs
    glEnableVertexAttribArray(GLKVertexAttribPosition);
    //SYNTAX -,number of elements per vertex, datatype, FALSE, size of element, offset in datastructure
    glVertexAttribPointer(GLKVertexAttribPosition, 3, GL_FLOAT, GL_FALSE, sizeof(Vertex), (const GLvoid *) offsetof(Vertex, Position));
    
    glEnableVertexAttribArray(GLKVertexAttribColor);
    glVertexAttribPointer(GLKVertexAttribColor, 4, GL_FLOAT, GL_FALSE, sizeof(Vertex), (const GLvoid *) offsetof(Vertex, Color));
    
    //Textures
    glEnableVertexAttribArray(GLKVertexAttribTexCoord0);
    glVertexAttribPointer(GLKVertexAttribTexCoord0, 2, GL_FLOAT, GL_FALSE, sizeof(Vertex), (const GLvoid *) offsetof(Vertex, TexCoord));
    
    //Normals
    glEnableVertexAttribArray(GLKVertexAttribNormal);
    glVertexAttribPointer(GLKVertexAttribNormal, 3, GL_FLOAT, GL_FALSE, sizeof(Vertex), (const GLvoid *) offsetof(Vertex, Normal));
    
    
    glBindVertexArrayOES(0);
}

- (void)tearDownGL {
    
    [EAGLContext setCurrentContext:self.context];
    
    glDeleteBuffers(1, &_vertexBuffer);
    glDeleteBuffers(1, &_indexBuffer);
    glDeleteVertexArraysOES(1, &_vertexArray);
    _cubeEffect = nil;
}

- (void) resize {
    
    if (self.controller != nil) {
        _camera = [[SphereCamera alloc] initWithWidth: self.bounds.size.width Height: self.bounds.size.height];
        
        _cubeEffect.transform.projectionMatrix = _camera.projection;
        
        //            Utils.setDelay(2, closure: testCreating)
    }
}

- (NSDictionary*) intersectsTriangleWithNear:(GLKVector3)near
                                         Far:(GLKVector3)far
                                           A:(GLKVector3)a
                                           B:(GLKVector3)b
                                           C:(GLKVector3)c
                                      Normal:(GLKVector3)normal {
    //follow http://sarvanz.blogspot.com/2012/03/probing-using-ray-casting-in-opengl.html
    
    GLKVector3 ray = GLKVector3Subtract(far, near);
    float nDotL = GLKVector3DotProduct(normal, ray);
    //是否跟三角面在同一平面或者背对三角面
    if (nDotL >= 0) {
        return @{ @"intersect": @NO, @"result": [NSNull null] };
    }
    
    float d = GLKVector3DotProduct(normal, GLKVector3Subtract(a, near)) / nDotL;
    //是否在最近点和最远点之外
    if (d < 0 || d > 1) {
        return @{ @"intersect": @NO, @"result": [NSNull null] };
    }
    
    GLKVector3 p = GLKVector3Add(near, GLKVector3MultiplyScalar(ray, d));
    GLKVector3 n1 = GLKVector3CrossProduct( GLKVector3Subtract(b, a),  GLKVector3Subtract(p, a));
    GLKVector3 n2 = GLKVector3CrossProduct( GLKVector3Subtract(c, b),  GLKVector3Subtract(p, b));
    GLKVector3 n3 = GLKVector3CrossProduct( GLKVector3Subtract(a, c),  GLKVector3Subtract(p, c));
    
    if (GLKVector3DotProduct(normal, n1) >= 0 &&
        GLKVector3DotProduct(normal, n2) >= 0 &&
        GLKVector3DotProduct(normal, n3) >= 0) {
        NSDictionary *dictionary = @{ @"intersect": @YES, @"result": [NSValue value:&p withObjCType:@encode(GLKVector3)] };
        return dictionary;
    }else{
        return @{ @"intersect": @NO, @"result": [NSNull null] };
    }
}

- (void)glkView:(GLKView *)view drawInRect:(CGRect)rect {
    if (self.controller != nil) {
        
        [_cubeEffect prepareToDraw];
        //        _cubeEffect.transform.modelviewMatrix = _camera.view;
        
        glClearColor(0, 0, 0, 1.0);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
        
        glBindVertexArrayOES(_vertexArray);
        
        //        glDrawElements(GL_TRIANGLES, sizeof(indices) / sizeof(indices[0]), GL_UNSIGNED_BYTE, 0);
        
        glDrawElements(GL_TRIANGLES, sizeof(IndicesTrianglesCube) / sizeof(IndicesTrianglesCube[0]), GL_UNSIGNED_BYTE, 0);
    }
}

- (void)update {
    
    float aspect = fabsf(self.bounds.size.width / self.bounds.size.height);
    //    GLKMatrix4 projectionMatrix = GLKMatrix4MakePerspective(GLKMathDegreesToRadians(65.0f), aspect, 4.0f, 10.0f);
    GLKMatrix4 projectionMatrix = GLKMatrix4MakePerspective(GLKMathDegreesToRadians(65.0f), aspect, 0.1f, 100.0f);
    _cubeEffect.transform.projectionMatrix = projectionMatrix;
}

@end
